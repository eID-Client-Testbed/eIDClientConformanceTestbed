
# Purpose: 	this file 'Common/config.properties' initializes all default-values shared by all test cases. Depending on the particular test case respective parameters/values are overridden by test case specific
#          	properties in the respective config.properties in the test case folder: '<TESTCASE-NAME>/config.properties'.

# CAUTION: 	IF YOU CHANGE ANY VALUES within this file, YOU MUST validate the functionality of other test cases, as these values are inherited by
#       	all test cases and changes in this file therefore might affect lots of test case.

# NOTE: 	folders: any path-/file-names given in this properties-file are relative to the TESTCASE(!) currently executed. That is, 
#       	to reference a file within this 'common' folder, you must set a '../Common/' prefix. On the other hand, this allows for 
# 			pointing to a file within the {TESTCASE}-folder (currently executed), independent of its name.

# Hint: 	if you want remove a value which was defined as default value in Common/config.properties, you can set an empty value like
# 			my.key=


# default: use browsersimulator to automate tests. Set to
# ecard.testcase.type=browser
# for a particular test (in its folder) or here (for all tests), if to be performed manually in browser.
ecard.testcase.type=browsersimulator

# With this flag it is possible to trigger if the complete test case fails due to errors in the xml message evaluation result. 
# If set to 'false', all errors and warnings will be logged, but do not trigger a test case to fail.
# If true, tests will fail xml content in paos messages does not match with the expected content. This is default behavior which 
# should be used for testing.
ecard.testcase.failOnXMLEvaluationError=true

# Load test case in testbed. By this parameter some test cases may be disabled if 'false' in their config.properties. 
# For example test cases not applicable due to profiles. 
ecard.testcase.load=true

# Enable test case to be started in Testbed. This is applicable when a test case must be loaded but must not be started (e.g. EID_CLIENT_A1_02).
# Button 'Start' is disabled. 
ecard.testcase.enabled=true

# If manual result is activated (=true), the result from the test runner will be ignored. 
# The test case must be decided manually (mainly GUI test cases).
ecard.testcase.manualresult=false

# If indeterminable is activated (=true), result will not be passed even if all automatic checks are ok. 
# Instead, the result is undetermined and must be set manually after some evaluation by the operator. 
result.indeterminable=false
# If state is indeterminable this text will be shown. It should explain why the result is undetermined and how to proceed.
result.indeterminable.reason=


# Optional info popup messages that will be shown before test case starts
# entry suffix range [0-9]
# spaces and escape sequences (\n for newline and \t for tab) are allowed 
#ecard.testcase.messages.begin.0=
#ecard.testcase.messages.begin.1=
#ecard.testcase.messages.begin.2=

# Optional info popup messages that will be shown after test case ends
# entry suffix range [0-9]
# spaces and escape sequences (\n for newline and \t for tab) are allowed 
#ecard.testcase.messages.end.0=
#ecard.testcase.messages.end.1=


########## Expectations ##########################
# Expectations are defined per testcase to control 
# a testrun and its result. Overwrite these values
# in testcase-specific config.properties
##################################################

# Defines allowed ResultMinor values when ResultMajor=error. The values are defined in TR-03124.
# If multiple values are allowed, they can be given as a comma-separated list
expect.allowedParams.resultMinorErrors=trustedChannelEstablishmentFailed,cancellationByUser,serverError,clientError,communicationError

# FINAL STEP OF THE DEFAULT FLOW: The final step of the default test flow expected to be the browser redirect with ResultMajor=ok. 
# Allowed values: 
# TC_TOKEN_REDIRECT
# TC_TOKEN
# SERVER_ADDRESS
# START_PAOS
# EAC1
# EAC2
# EAC3
# TRANSMIT
# START_PAOS_RESPONSE
# REFRESH_ADDRESS_REDIRECT
# REFRESH_ADDRESS
# BROWSER_CONTENT
# Note that the steps not being part of the default flow are not to be defined here (but maybe 
# in additionalSteps).
# Default value: success test cases are expected to redirect browser to the refreshUrl. It must report ResultMajor=ok.
expect.finalDefaultFlowStep=REDIRECT_BROWSER
expect.finalDefaultFlowStep.urlPath={eservice.refresh.urlpath}
expect.finalDefaultFlowStep.urlParams=ResultMajor=ok

# ADDITIONAL STEPS: define TestSteps expected to be executed AFTER the finalDefaultFlowStep. 
# Sample: an incorrect tc_token will be returned (e.g. ServerAddress is empty), i.e. the last correct step 
# in the default flow (=finalDefaultFlowStep) is set to 'tc_token'. 
# AFTER that, the eID-Client shall redirect to the refreshUrl with 
# appropriate parameters (mainly ResultMajor=error&ResultMinor=res_min).
# There might be multiple steps to be performed after the last default flow step. These are 
# enumerated with .0, .1, etc.
# Sample definitions:
#expect.additionalStep.0=redirect_browser
#expect.additionalStep.url.0=https://{eservice.hostname}:{eservice.port}/{eservice.refresh.urlpath}
#expect.additionalStep.urlPath.0={eservice.refresh.urlpath}
#expect.additionalStep.urlParams.0=ResultMajor=error&ResultMinor=communicationError
#expect.additionalStep.statusCodes.0=400,404
# SUPPORTED PARAMETERS:
# - If providing additional steps, then 'expect.additionalStep' is mandatory to define the step itself, whereas
#   all others are optional
# - expect.additionalStep.url = FQDM e.g. 'protocol://host:port/path?param=value'. This is 
#   checked 1:1, e.g. useful for redirector Location
# - expect.additionalStep.urlPath = path-part of the URL only, e.g. '{eservice.refresh.urlpath}' (which would be 
#   resolved to 'refresh')
# - expect.additionalStep.urlParams = ampersand-separated list of key=value-pairs, e.g. 
#   'ResultMajor=error&ResultMinor=communicationError' where order is not checked. Note: when just passing 
#   'ResultMajor=error' it is auto-checked that ResultMinor is not null
#   If multiple urlParams are allowed, they can be given as a comma-separated list, e.g.
#   'ResultMajor=error&ResultMinor=trustedChannelEstablishmentFailed,ResultMajor=error&ResultMinor=clientError'
# - expect.additionalStep.statusCodes = comma-separated list of allowed statusCodes, useful for BROWSER_CONTENT

########## eID-Client #######################
# The eID-Client offers its services at this address and is activated this way.
# For example, for mobile platforms it might be 
# client.url=eid://127.0.0.1:24727
client.url=http://127.0.0.1:24727


####### eID-Server ################################
# Here the parameters concerning the eID-Server of the Testbed are initialized.

# The eID-Server uses the following address an the port number.
eidservice.hostname=eidserver-idp-test.secunet.de
eidservice.port=8443

# The TLS uses the following default certificate. If another certificate is to be used in a
# particular test case, it should be overridden in the respective folder of the test case. 
eidservice.certificate=CERT_TLS_EIDSERVER_1.der
eidservice.privatekey=CERT_TLS_EIDSERVER_1_KEY.der

# SSL/TLS version. Supported versions are sslv3, tls10, tls11 and tls12. Note: sslv2 NOT supported by Java anymore.
eidservice.tls.version=tls11, tls12

# Conformity check of TLS version that the eID server expects to receive in CLientHello.
# Currently, an eID client must offer TLS 1.2 according to TR-03116-4 
# Supported versions are sslv3, tls10, tls11 and tls12. Note: sslv2 NOT supported by Java anymore.
eidservice.tls.expectedClientVersion=tls12

# Comma-separated list of cipher suites (for allowed ones see BSI (TR-03116-4 or TR-02102))
# default cipherSuite (TLS_RSA_PSK_WITH_AES_256_CBC_SHA) is set 
# by eidservice.usepsk=true, override with specific cipherSuite if required
# eidservice.tls.ciphersuites=TLS_RSA_PSK_WITH_AES_256_CBC_SHA
eidservice.usepsk=true

# Should the eID-Server work as Attached eID-Server
eidservice.isAttached=false

#This a a workaround option for clients that do not send a correct "\r\n\r\n" between HTTP header and body.
# If set to true, the servers will additionally accept "\n\n"
eidservice.accept.non.conform.http11.messages=false

# The following lines initialize the CV certificates to be used by the eID-Server.
# In default flow there is no need in a link certificate to be sent to the eID-Client, therefore deactivated here.
# eidservice.cv.cvca=CERT_CV_LINK_2_A.cvcert
eidservice.cv.dvca=CERT_CV_DV_1_A.cvcert
eidservice.cv.terminal=CERT_CV_TERM_1_A.cvcert
eidservice.cv.terminal.key=CERT_CV_TERM_1_A_Key.pkcs8
eidservice.cv.terminal.sector=SectorKey.bin
eidservice.cert.description=CERT_CV_TERM_1_A_Desc.bin

# These variables specify the content of RequiredCHAT and OptionalCHAT sent if required in EAC1InputType message.
# Disabled by default.
# eidservice.chat.req=ChatRequired.bin
# eidservice.chat.opt=ChatOptional.bin

# The HTTP code that will be send to the eID-Client for PAOS requests. Input other than 200 and 202 are ignored, the fallback is 202.
eidservice.paos.response=202

# Define AuthenticatedAuxiliaryData sent to the eID-Client in EAC1InputType.
# This variable must be empty in the default flow. Otherwise it will be wrongly used to generate the signature.
# Reference the respective file in test cases where it is explicitly required (e.g. EID_CLIENT_B_05):
# eidservice.aux.data=AuxData.bin 
eidservice.aux.data=

# Checks whether the eID-Client uses exactly the address from the TC Token to connect to the eID-Server (case-insensitive).
# If not, the test case stops with an error. Disable this verification to pass through.  
eidservice.check.uri=true

# Optional certificates that could be used for any specific test cases (e.g. to define another certificate
# that should be sent in EAC2InputType protocol steps).
# entry suffix range [0-9]
eidservice.cv.cvca.0=
eidservice.cv.cvca.1=
eidservice.cv.cvca.2=
eidservice.cv.dvca.0=
eidservice.cv.dvca.1=
eidservice.cv.dvca.2=
eidservice.cv.dvca.3=
eidservice.cv.terminal.0=
eidservice.cv.terminal.1=


####### eService ##################################
# Here the parameters concerning the eService of the Testbed are initialized.

# The eService uses the following address an the port number.
eservice.port=443
eservice.hostname=eservice-idp-test.secunet.de

# The TLS uses the following default certificate. If another certificate is to be used in a
# particular test case, it should be overridden in the respective folder of the test case. 
eservice.certificate=CERT_TLS_ESERVICE_1.der
eservice.privatekey=CERT_TLS_ESERVICE_1_KEY.der

# eservice.index.urlpath also always allows for passing nothing, i.e. "/" path
# Define index-path of the eService which content is defined in eservice_index.html. 
eservice.index.urlpath=index
eservice.index.template=eservice_index.html

# eService also provides a refresh address which content is defined in eservice_refresh.html.
eservice.refresh.urlpath=refresh
eservice.refresh.template=eservice_refresh.html

# Communication error address may be part of the eService or a dedicated server. 
# These parameters define it as part of the eService.
eservice.communicationerror.urlpath=communicationerror
eservice.communicationerror.template=eservice_communication_error.html

# Path where the TC Token can be retrieved by the eID-Client. 
# The content of the TC Token is defined in TCToken.xml
eservice.tctoken.urlpath=tctoken
eservice.tctoken.template=TCToken.xml

# SSL/TLS version. Supported versions are sslv3, tls10, tls11 and tls12. Note: sslv2 NOT supported by Java anymore.
eservice.tls.version=tls10,tls11,tls12

# Conformity check of TLS version that the eService expects to receive in CLientHello.
# Currently, an eID client must offer TLS 1.2 according to TR-03116-4 
# Supported versions are sslv3, tls10, tls11 and tls12. Note: sslv2 NOT supported by Java anymore.
eservice.tls.expectedClientVersion=tls12

# Restricts the cipher suites to be supported by providing a comma-separated list of cipher suites (for allowed ones see BSI TR-03116-4 and TR-02102).
# If empty, all available cipher suites are supported (no restriction).
eservice.tls.ciphersuites=

# If this parameter is set, it forces use of the given standardized DH parameters (default is "rfc5114_2048_224") during DHEKeyExchange.
# Supported values (choose only one): rfc2409_768, rfc2409_1024, rfc3526_1536, rfc3526_2048, rfc3526_3072, rfc3526_4096, rfc3526_6144, rfc3526_8192, rfc5114_1024_160, rfc5114_2048_224, rfc5114_2048_256 
eservice.tls.dhParameters=

# If this parameter is set, it forces use of the given named curve (e.g. "secp256r1") during ECDHEKeyExchange.
# The client's SupportedEllipticCurve extension will be ignored.
eservice.tls.eccurve=

# If this parameter is set, it forces use of the given SignatureAndHashAlgorithm, e.g. SHA256withRSA.
# The client's SupportedSignatureAndHashAlgorithm extension will be ignored.
eservice.tls.signaturealgorithm=

# The eService path which will not provide the TC Token but redirect the eID-Client instead.
eservice.redirect.urlpath=redirect_tctoken
# If enabled, the eService redirects the eID-Client to another server to get the TCToken from that server.
# eservice.redirector.tctoken={redirector.tctoken.0}
# Location for redirect
#eservice.redirect.location=https://{redirector.tctoken.hostname.0}:{redirector.tctoken.port.0}/{eservice.tctoken.urlpath}


####### TCTOKEN PROVIDER #########################
# In particular cases the TC Token Provider must not be part of the eService. It must be a dedicated server.   
# No separated TC Token Provider by default; will be enabled if value for parameter 'tctokenprovider.hostname' is set. If not set eService provides the TC Token.
tctokenprovider.port=
tctokenprovider.hostname=
tctokenprovider.certificate=
tctokenprovider.privatekey=
tctokenprovider.index.template=
tctokenprovider.tctoken.urlpath=
# SSL/TLS version. Supported versions are sslv3, tls10, tls11 and tls12. Note: sslv2 NOT supported by Java anymore.
tctokenprovider.tls.version=
# Restrict the cipher suites used by providing a comma-separated list of cipher suites (for allowed ones see BSI TR-03116-4 and TR-02102).
tctokenprovider.tls.ciphersuites=

####### COMM ERROR ADDRESS SERVER #########################
# CommunicationErrorAddress is usually the part of the eService. Following parameters enable a separate server for communication error address.
# Server is not started if "commerroraddressserver.hostname" is not set.
# By default host of eservice ist used, but on another port
commerroraddressserver.port=444
commerroraddressserver.hostname=eservice-idp-test.secunet.de
commerroraddressserver.communicationerror.urlpath=communicationerror
commerroraddressserver.communicationerror.template=eservice_communication_error.html
# https not enabled if certificate is empty
commerroraddressserver.certificate=CERT_TLS_ESERVICE_1.der
commerroraddressserver.privatekey=CERT_TLS_ESERVICE_1_KEY.der
commerroraddressserver.index.template=
commerroraddressserver.tls.version=tls12
commerroraddressserver.tls.ciphersuites=


####### REDIRECTORS ###############################
# Here all available redirectors are preconfigured. These are, however, not used by default.
redirector.tctoken.hostname.0=redirect-a-idp-test.secunet-nsop.de
redirector.tctoken.hostname.1=redirect-b-idp-test.secunet-nsop.de
redirector.tctoken.hostname.2=redirect-c-idp-test.secunet-nsop.de
redirector.refresh.hostname.0=redirect-a-idp-test.secunet-nsop.de
redirector.refresh.hostname.1=redirect-b-idp-test.secunet-nsop.de
redirector.refresh.hostname.2=redirect-c-idp-test.secunet-nsop.de
redirector.tctoken.port.0=3000
redirector.tctoken.port.1=3001
redirector.tctoken.port.2=3002
redirector.refresh.port.0=4000
redirector.refresh.port.1=4001
redirector.refresh.port.2=4002
redirector.tctoken.urlpath.0=tctoken
redirector.tctoken.urlpath.1=tctoken
redirector.tctoken.urlpath.2=tctoken
redirector.refresh.urlpath.0=redirect_refresh
redirector.refresh.urlpath.1=redirect_refresh
redirector.refresh.urlpath.2=redirect_refresh
redirector.tctoken.certificate.0=CERT_TLS_REDIRECT_1_A.der
redirector.tctoken.certificate.1=CERT_TLS_REDIRECT_1_B.der
redirector.tctoken.certificate.2=CERT_TLS_REDIRECT_1_C.der
redirector.refresh.certificate.0=CERT_TLS_REDIRECT_1_A.der
redirector.refresh.certificate.1=CERT_TLS_REDIRECT_1_B.der
redirector.refresh.certificate.2=CERT_TLS_REDIRECT_1_C.der
redirector.tctoken.privatekey.0=CERT_TLS_REDIRECT_1_A_KEY.der
redirector.tctoken.privatekey.1=CERT_TLS_REDIRECT_1_B_KEY.der
redirector.tctoken.privatekey.2=CERT_TLS_REDIRECT_1_C_KEY.der
redirector.refresh.privatekey.0=CERT_TLS_REDIRECT_1_A_KEY.der
redirector.refresh.privatekey.1=CERT_TLS_REDIRECT_1_B_KEY.der
redirector.refresh.privatekey.2=CERT_TLS_REDIRECT_1_C_KEY.der
redirector.tctoken.status.0=302
redirector.tctoken.status.1=303
redirector.tctoken.status.2=307
redirector.refresh.status.0=302
redirector.refresh.status.1=303
redirector.refresh.status.2=307
# To use a redirector it has to be initialized (with preconfigured values) in testcases.
#redirector.tctoken.0={redirector.tctoken.hostname.0}:{redirector.tctoken.port.0}/{redirector.tctoken.urlpath.0},{redirector.tctoken.hostname.1}:{redirector.tctoken.port.1}/{redirector.tctoken.urlpath.1},{redirector.tctoken.certificate.0},{redirector.tctoken.privatekey.0},{redirector.tctoken.status.0}
#redirector.tctoken.1={redirector.tctoken.hostname.1}:{redirector.tctoken.port.1}/{redirector.tctoken.urlpath.1},{eservice.hostname}:{eservice.port}/{eservice.tctoken.urlpath},{redirector.tctoken.certificate.1},{redirector.tctoken.privatekey.1},{redirector.tctoken.status.1}
#redirector.refresh.0={redirector.refresh.hostname.0}:{redirector.refresh.port.0}/{redirector.refresh.urlpath.0},{eservice.hostname}:{eservice.port}/{eservice.refresh.urlpath},{redirector.refresh.certificate.0},{redirector.refresh.privatekey.0},{redirector.refresh.status.0}


####### PAOS templates ###############################
# If ecard.InitializeFramework is not set, this step will be skipped which is default.
#ecard.InitializeFramework=Step_InitializeFramework.xml
ecard.InitializeFramework=

ecard.DIDAuthenticate1=Step_EAC1.xml
ecard.DIDAuthenticate2=Step_EAC2.xml
# If ecard.DIDAuthenticate3 is not set, the scenario with only 2 EAC messages is used!
# Reference EAC3 file in test cases where it is explicitly required.
#ecard.DIDAuthenticate3=Step_EAC3.xml
ecard.DIDAuthenticate3=
ecard.Transmit=Step_Transmit.xml
ecard.StartPaosResponse=Step_StartPaosResponse.xml
# Use different StartPaosResponse message in case of an error. 
# It contains ResultMajor=error instead of ok.
ecard.ErrorStartPaosResponse=Step_StartPaosResponse_error.xml

# Usually the UseRawEphemeralPublicKey must have a leading byte 0x04. 
# However, some eID-Clients may erroneously expect the value without leading byte. 
# In order to satisfy this expectation, raw public key may be sent by enabling (=true) this parameter. 
ecard.UseRawEphemeralPublicKey=false

# Specify the DNS of the system where the Browsersimulator runs. 
browsersimulator.rmi.host=tr-03124-browsersimulator.secunet.de
browsersimulator.rmi.port=1099

####### TESTCASE OPERATION PROPERTIES ############
testcase.profiles=CRYPTO,EAC,OA,PAOS,PIN_MANAGEMENT,USER_INTERFACE,PREVERIFICATION,NO_PREVERIFICATION,STRICT_TRANSMIT
# If set to true, the Testbed holds after EAC1OutputType and shows a user confirm dialog until confirmed.
# This is done to enable user to abort the Online-Authentication after the PIN entry.
testcase.eac1.confirm=false

## Evaluation Property Filenames. These files define the expectation to the incoming PAOS messages.   
eval.startpaos=eval_startpaos.properties
eval.initFramework=eval_initFwk.properties
eval.auth1=eval_auth1.properties
eval.auth2=eval_auth2.properties
eval.auth3=eval_auth3.properties
eval.transmit=eval_transmit.properties

####### CARD FILES ###############################
card.ca.defaultkeyid=-1
card.ef.cardaccess=EF.CardAccess.bin
card.ef.cardsecurity=EF.CardSecurity.bin

####### CARD SIMULATION ##########################
cardsimulation.date=20120101

# Name of certificate containing the trustpoint for card simulation. If value is not set, no trustpoint will be set.
cardsimulation.trustpoint1=CERT_CV_CVCA_1.cvcert
#cardsimulation.trustpoint2=

####### CARD SIMULATION REMOTE CONTROL ###########
cardsimulation.resetAtStart=true
cardsimulation.configurationIdentifier=gt_default_nPA

####### TESTOBJECT BUILDER PROPERTIES ############
# Index of trustpoint(s). May be "r", "s" and "s-1". If value is not set, no trustpoint is refered.
#cardsimulation.trustpoint1.index=
#cardsimulation.trustpoint2.index=

# Mode of sent link certificate chain. May be "all" (send all relevant link certificates), "preverification" (only send missing link certificates) and "none" (send no link certificate).
#ecard.testcase.linkcertmode.eac1=
#ecard.testcase.linkcertmode.eac2=
