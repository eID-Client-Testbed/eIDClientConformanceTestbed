ecard.testcase.description=Positive test describing the eID-Client returning to the web-session following the redirects.\nIMPORTANT: This implementation expects the eID-Client to perform the TLS handshake without HTTP interaction to the eServie in order to retrieve the server certificate of the refresh URL.\nPlease follow the process of Online-Authentication. Use default values and a correct PIN.\nUse the GlobalTester test case TS_eID_1.2.1.xml.

testcase.profiles=OA,REFRESH_REDIRECT
eservice.tctoken.template=TCToken.xml

redirector.refresh.0={redirector.refresh.hostname.0}:{redirector.refresh.port.0}/{redirector.refresh.urlpath.0},{redirector.refresh.hostname.1}:{redirector.refresh.port.1}/{redirector.refresh.urlpath.1},{redirector.refresh.certificate.0},{redirector.refresh.privatekey.0},{redirector.refresh.status.0}
redirector.refresh.1={redirector.refresh.hostname.1}:{redirector.refresh.port.1}/{redirector.refresh.urlpath.1},{redirector.refresh.hostname.2}:{redirector.refresh.port.2}/{redirector.refresh.urlpath.2},{redirector.refresh.certificate.1},{redirector.refresh.privatekey.1},{redirector.refresh.status.1}
redirector.refresh.2={redirector.refresh.hostname.2}:{redirector.refresh.port.2}/{redirector.refresh.urlpath.2},{eservice.hostname}:{eservice.port}/sop_redirect_refresh,{redirector.refresh.certificate.2},{redirector.refresh.privatekey.2},{redirector.refresh.status.2}
#redirector.refresh.3={eservice.hostname}:8443/redirect_refresh,{eservice.hostname}:{eservice.port}/{eservice.refresh.urlpath},CERT_TLS_ESERVICE_1.der,CERT_TLS_ESERVICE_1_KEY.der,{redirector.refresh.status.0}

expect.finalDefaultFlowStep=START_PAOS_RESPONSE

# Redirect to the RefreshAddress and include an error code.
expect.additionalStep.0=REFRESH_ADDRESS_REDIRECT
expect.additionalStep.urlPath.0={redirector.refresh.urlpath.0}

expect.additionalStep.1=REFRESH_ADDRESS_REDIRECT
expect.additionalStep.urlPath.1={redirector.refresh.urlpath.1}

expect.additionalStep.2=REFRESH_ADDRESS_REDIRECT
expect.additionalStep.urlPath.2={redirector.refresh.urlpath.2}

# The client makes TLS handshake with the eService URL. This expected test step is necessary because any successful TLS connection to the eService is 
# treated by the testbed implementation as REFRESH_ADDRESS regardless to the following redirect. 
expect.additionalStep.3=REFRESH_ADDRESS
# Redirect the client for the second time to a SOP conform location.
expect.additionalStep.4=REFRESH_ADDRESS_REDIRECT
expect.additionalStep.urlPath.4={eservice.hostname}:{eservice.port}/sop_redirect_refresh,{eservice.hostname}:{eservice.port}/{eservice.refresh.urlpath},eservice.certificate,eservice.privatekey,{redirector.refresh.status.0}

# Retrieve the certificate of the RefreshAddress
expect.additionalStep.5=REFRESH_ADDRESS

# If the retrieved certificate was ok, redirect the browser
expect.additionalStep.6=REDIRECT_BROWSER
expect.additionalStep.urlPath.6={eservice.refresh.urlpath}
expect.additionalStep.urlParams.6=ResultMajor=ok
expect.additionalStep.statusCodes.6=303